import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from moduls.lightrag_module import build_rag
from moduls.extract_text import process_document
from keyboards.document_menu import document_menu

import datetime

from config import BASE_STORAGE_DIR

import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

router = Router()

class DocumentStates(StatesGroup):
    waiting_for_document = State()
    proccessing_document = State()
    choosing_document_to_delete = State()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
def get_documents_list(user_id: int, context_name: str):
    document_path = os.path.join(BASE_STORAGE_DIR, str(user_id), context_name, "documents")
    if not os.path.exists(document_path):
        return []

    documents = []
    for file_name in os.listdir(document_path):
        file_path = os.path.join(document_path, file_name)
        if os.path.isfile(file_path):
            file_size = os.path.getsize(file_path) // 1024 # –†–∞–∑–º–µ—Ä –≤ –ö–ë
            file_extension = os.path.splitext(file_name)[1]
            file_mtime = datetime.datetime.fromtimestamp(os.path.getmtime(file_path)).strftime("%Y-%m-%d %H:%M")

            documents.append({
                "name": file_name,
                "extension": file_extension,
                "size_kb": file_size,
                "uploaded_at": file_mtime
            })

    return documents

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
@router.message(F.text.lower() == "–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")
async def upload_document_request(message: Message, state: FSMContext):
    user_data = await state.get_data()
    current_context = user_data.get("current_context")

    if not current_context:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ '–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤'.")
        return

    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.", reply_markup=ReplyKeyboardRemove())
    await state.set_state(DocumentStates.waiting_for_document)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫–æ–≤
async def processing_uploaded_docs(message: Message, state: FSMContext):
    await message.answer("‚è≥–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")

    user_id = message.from_user.id
    user_data = await state.get_data()
    current_context = user_data.get('current_context')

    user_storage_path = os.path.join(BASE_STORAGE_DIR, str(user_id), current_context, "storage")
    user_txt_path = os.path.join(BASE_STORAGE_DIR, str(user_id), current_context, "text")
    user_documents_path = os.path.join(BASE_STORAGE_DIR, str(user_id), current_context, "documents")

    # --- 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG ---
    rag = None
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ build_rag
        rag = await build_rag(user_storage_path)
        logging.info(f"Successfully created/initialized RAG for context {current_context} of user {user_id}")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.exception(f"An exception occurred while creating RAG for context {current_context} of user {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã RAG üòî")
        return False # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–± –æ—à–∏–±–∫–µ

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ RAG —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if rag is None:
         logging.error(f"RAG object is None after initialization for context {current_context}, user {user_id}.")
         await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RAG. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
         return False # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–± –æ—à–∏–±–∫–µ

    for filename in os.listdir(user_documents_path):
        await message.answer(f"‚è≥ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {filename.split('/')[-1]}")
        try:
          name_of_file = filename.split('.')[0]
          txt_file_path = os.path.join(user_txt_path, f"{name_of_file}.txt")
          logging.info(f"TXT file path: {txt_file_path}")
          if not os.path.isfile(txt_file_path):
              extracted_text = process_document(os.path.join(user_documents_path, filename))
              logging.info(f"Extract text from file {filename.split('/')[-1]}")
              #print(extracted_text)
              with open(txt_file_path, 'w', encoding="utf-8") as txt_out_file:
                  txt_out_file.write(extracted_text)
              await message.answer(f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {filename.split('/')[-1]} –∏–∑–≤–ª–µ—á–µ–Ω!")
              await message.answer(f"‚è≥ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {filename.split('/')[-1]} –≤ RAG...")
              logging.info(f"Adding text from file {filename.split('/')[-1]} to the RAG")
              try:
                with open(txt_file_path) as read_file:
                    await rag.ainsert(read_file.read())
                logging.info(f"Text from file {filename.split('/')[-1]} was added to the RAG")
                await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {filename.split('/')[-1]} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ RAG!")
              except Exception as e:
                logging.info(f"An exception was occured while adding text from file {filename} to the RAG: {e}")
                await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {filename.split('/')[-1]} –≤ RAG üòî")
          else:
              continue
        except Exception as e:
          print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {filename}: {repr(e)}")
          await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {filename.split('/')[-1]} üòî")
          continue

    await message.answer("–î–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!", reply_markup=document_menu)


# –•–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
@router.message(DocumentStates.waiting_for_document, F.document)
async def save_uploaded_document(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await state.get_data()
    current_context = user_data.get('current_context')

    if not current_context:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ.")
        return

    document = message.document
    user_documents_path = os.path.join(BASE_STORAGE_DIR, str(user_id), current_context, "documents")
    user_txt_path = os.path.join(BASE_STORAGE_DIR, str(user_id), current_context, "txt")

    if not os.path.exists(user_documents_path):
        os.makedirs(user_documents_path)
        os.makedirs(user_txt_path)

    sanitized_filename = document.file_name.replace(' ', '_')
    document_path = os.path.join(user_documents_path, sanitized_filename)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –§–°
    file = await message.bot.get_file(document.file_id)
    await message.bot.download_file(file.file_path, document_path)

    await message.answer(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{sanitized_filename}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç '{current_context}'!")
    await processing_uploaded_docs(message, state)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.message(F.text.lower() == "—É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")
async def ask_document_for_deletion(message: Message, state: FSMContext):
    user_data = await state.get_data()
    current_context = user_data.get("current_context")

    if not current_context:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ '–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤'.")
        return

    user_id = message.from_user.id
    documents = get_documents_list(user_id, current_context)

    if not documents:
        await message.answer(f"–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ '{current_context}' –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    keyboard = InlineKeyboardBuilder()
    for doc in documents:
        keyboard.button(text=doc['name'], callback_data=f"delete_{doc['name']}")
    keyboard.adjust(1)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard.as_markup())

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("delete_"))
async def confirm_deletion(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    current_context = user_data.get("current_context")
    document_name = callback.data.split("_", 1)[1]

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{document_name}")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")

    await callback.message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '{document_name}'?", reply_markup=keyboard.as_markup())

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_document(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    current_context = user_data.get("current_context")
    document_name = callback.data.split("_", 2)[2]

    user_id = callback.from_user.id
    document_path = os.path.join(BASE_STORAGE_DIR, str(user_id), current_context, "documents", document_name)

    if os.path.exists(document_path):
        os.remove(document_path)
        await callback.message.answer(f"‚úÖ –§–∞–π–ª '{document_name}' —É–¥–∞–ª—ë–Ω.")
    else:
        await callback.message.answer(f"‚ö† –§–∞–π–ª '{document_name}' —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery):
    await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@router.message(F.text.lower() == "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")
async def list_documents(message: Message, state: FSMContext):
    user_data = await state.get_data()
    current_context = user_data.get("current_context")

    if not current_context:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ '–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤'.")
        return

    user_id = message.from_user.id
    documents = get_documents_list(user_id, current_context)

    if len(documents) == 0:
        await message.answer(f"–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ '{current_context}' –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
        return

    doc_list_message = f"üìÇ **–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ '{current_context}':**\n\n"
    for doc in documents:
        doc_list_message += (f"üìÑ **{doc['name']}**\n"
                             f"  ‚îú üóÇ –§–æ—Ä–º–∞—Ç: {doc['extension']}\n"
                             f"  ‚îú üìè –†–∞–∑–º–µ—Ä: {doc['size_kb']} –ö–ë\n"
                             f"  ‚îî üïí –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {doc['uploaded_at']}\n\n")

    await message.answer(doc_list_message)
