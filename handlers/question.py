import os
import logging
from aiogram import Router, F 
from aiogram.types import KeyboardButton, Message, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from lightrag import QueryParam

from moduls.lightrag_module import build_rag
from config import BASE_STORAGE_DIR
from keyboards.document_menu import document_menu
from keyboards.main_menu import main_menu

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

router = Router()

VALID_QUERY_MODES = ["naive", "local", "global", "hybrid", "mix"]

back_keyboard = ReplyKeyboardMarkup(
  keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
  resize_keyboard=True
)

class QuestionStates(StatesGroup):
  asking_questions_in_context = State()

@router.message(F.text.lower() == "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_for_question(message: Message, state: FSMContext):
  user_data = await state.get_data()
  current_context = user_data.get("current_context")

  if not current_context:
    await message.answer("‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤'.")
    return
  
  await message.answer(
    f"üîπ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: **{current_context}**\n\n"
    f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ' | '.\n\n"
    f"–í–ê–ñ–ù–û: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª ' | ' –≤ –∑–∞–ø—Ä–æ—Å–µ, –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏ —Ä–µ–∂–∏–º–∞."
    f"**–§–æ—Ä–º–∞—Ç:** `–í–∞—à –≤–æ–ø—Ä–æ—Å | —Ä–µ–∂–∏–º`\n\n"
    f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:**\n"
    f" ‚Ä¢ `naive` - –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ).\n"
    f" ‚Ä¢ `local` - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏ —Å–≤—è–∑–∏ –≥—Ä–∞—Ñ–∞ –∑–Ω–∞–Ω–∏–π.\n"
    f" ‚Ä¢ `global` - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏ —Å–≤—è–∑–∏  –≥—Ä–∞—Ñ–∞ –∑–Ω–∞–Ω–∏–π.\n"
    f" ‚Ä¢ `hybrid` - –ö–æ–º–±–∏–Ω–∞—Ü–∏—è local –∏ global.\n\n"
    f" ‚Ä¢ `mix` - –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –≥—Ä–∞—Ñ–∞ –∑–Ω–∞–Ω–∏–π.\n\n"
    f"*–ü—Ä–∏–º–µ—Ä:* `–ö–∞–∫–æ–≤—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞? | naive`",
    reply_markup=back_keyboard, # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É document_menu
    parse_mode="Markdown" # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  )
  await state.set_state(QuestionStates.asking_questions_in_context)


@router.message(QuestionStates.asking_questions_in_context)
async def process_rag_question(message: Message, state: FSMContext):
  user_data = await state.get_data()
  current_context = user_data.get("current_context")
  user_id = message.from_user.id
  if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
         await handle_back_button(message, state) # –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ö–µ–Ω–¥–ª–µ—Ä
         return

  if not current_context:
    await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.")
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
    return

  user_input = message.text.strip()
  parts = user_input.split("|", 1)

  if len(parts) != 2:
    await message.answer(
      f"‚ùóÔ∏è **–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞.** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ —Ä–µ–∂–∏–º, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ ' | ', –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'\n\n"
      f"**–ü—Ä–∏–º–µ—Ä:** `–¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ | naive`"
    )
    return

  question_text = parts[0].strip()
  query_mode = parts[1].strip().lower()

  if not question_text:
    await message.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.")
    return

  if query_mode not in VALID_QUERY_MODES:
    await message.answer(
      f"‚ùóÔ∏è **–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º:** `{query_mode}`.\n\n"
      f"–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–µ–∂–∏–º—ã: {', '.join(VALID_QUERY_MODES)}."
    )
    return

  await message.answer("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
  logging.info(f"User {user_id} asked in context '{current_context}': '{question_text}' with mode '{query_mode}'")

  storage_dir = os.path.join(BASE_STORAGE_DIR, str(user_id), current_context, "storage")
  rag = None
  try:
    rag = await build_rag(storage_dir)
    logging.info(f"RAG initialized seccessfuly for context '{current_context}' for user {user_id}")
  except Exception as e:
    logging.exception(f"Failed to initialize RAG for context '{current_context}' (User: {user_id}: {e})")
    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RAG –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()
    await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=document_menu)
    return

  try:
    response = await rag.aquery(question_text, param=QueryParam(mode=query_mode))
    if response:
      logging.info(f"Succsessfuly got answer for user {user_id} in context '{current_context}'")
      await message.answer(f"üí° **–û—Ç–≤–µ—Ç:**\n\n{response}")
    else:
      logging.warning(f"RAG returned no answer or unexpected structure for user {user_id} in context '{current_context}'. Response: {response}")
      await message.answer("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã. –í–æ–∑–º–æ–∂–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")

  except Exception as e:
    logging.exception(f"Error during RAG query for context '{current_context}' (User: {user_id}): {e}")
    await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ RAG.")
  
  finally:
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'.")

@router.message(QuestionStates.asking_questions_in_context, F.text.lower() == "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥")
async def handle_back_button(message: Message, state: FSMContext):
    user_data = await state.get_data()
    current_context = user_data.get("current_context", "—Ç–µ–∫—É—â–∏–π") # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è

    logging.info(f"User {message.from_user.id} exited question mode for context '{current_context}'.")
    #await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(
        f"–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ '{current_context}'.",
        reply_markup=document_menu # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    )








