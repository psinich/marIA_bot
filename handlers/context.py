import os
import shutil
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from keyboards.main_menu import main_menu

from config import BASE_STORAGE_DIR, MAX_CONTEXTS

router = Router()

class ContextStates(StatesGroup):
    naming = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
def get_user_contexts(user_id: int):
    user_dir = os.path.join(BASE_STORAGE_DIR, str(user_id))
    if not os.path.exists(user_dir):
        os.makedirs(user_dir)
    return [name for name in os.listdir(user_dir) if os.path.isdir(os.path.join(user_dir, name))]

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
@router.message(F.text.lower() == "üìÇ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç")
async def create_context(message: Message, state: FSMContext):
    user_id = message.from_user.id
    context = get_user_contexts(user_id)

    if len(context) >= MAX_CONTEXTS:
        await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ContextStates.naming)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
@router.message(ContextStates.naming)
async def save_context_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    context_name = message.text.strip()

    user_dir = os.path.join(BASE_STORAGE_DIR, str(user_id))
    context_path = os.path.join(user_dir, context_name)

    storage_path = os.path.join(context_path, "storage")
    documents_path = os.path.join(context_path, "documents")

    if os.path.exists(context_path):
        await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return

    os.makedirs(storage_path)
    os.makedirs(documents_path)
    await state.clear()

    await message.answer(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç '{context_name}' —Å–æ–∑–¥–∞–Ω!", reply_markup=main_menu)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
@router.message(F.text.lower() == "üìã —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤")
async def list_contexts(message: Message):
    user_id = message.from_user.id
    contexts = get_user_contexts(user_id)
    if not contexts:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤.")
        return

    keyboard = InlineKeyboardBuilder()
    for context in contexts:
        keyboard.button(text=context, callback_data=f"select_{context}")

    await message.answer("–í–∞—à–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã:", reply_markup=keyboard.as_markup())

@router.callback_query(F.data.startswith("select_"))
async def select_context(callback: CallbackQuery, state: FSMContext):
    context_name = callback.data.split("_", 1)[1]
    await state.update_data(current_context=context_name) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")],
                  [KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")],
                  [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")],
                  [KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")],
                  [KeyboardButton(text="–ú–µ–Ω—é")]],
        resize_keyboard=True
    )

    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context_name}", reply_markup=keyboard)

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
@router.message(F.text.lower() == "üóë —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç")
async def delete_context(message: Message, state: FSMContext):
    user_id = message.from_user.id
    contexts = get_user_contexts(user_id)

    if not contexts:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=context, callback_data=f"delete_ctx_{context}")]
            for context in contexts
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("delete_ctx_"))
async def confirm_delete_context(callback: CallbackQuery, state: FSMContext):
    context_name = callback.data.replace("delete_ctx_", "", 1)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_ctx_{context_name}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
        ]
    )

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    try:
        await callback.message.delete()
    except Exception:
        pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç '{context_name}'? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("confirm_delete_ctx_"))
async def delete_context_confirmed(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    context_name = callback.data.split("_", 3)[3]
    context_path = os.path.join(BASE_STORAGE_DIR, str(user_id), context_name)

    try:
        await callback.message.delete()
    except Exception:
        pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    if os.path.exists(context_path):
        shutil.rmtree(context_path)  # –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        await callback.message.answer(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç '{context_name}' –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await callback.message.answer(f"‚ö† –ö–æ–Ω—Ç–µ–∫—Å—Ç '{context_name}' —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    await callback.answer()  # –ó–∞–∫—Ä—ã—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery):
    await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()
